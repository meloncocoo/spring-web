buildscript {
    ext {
        springBootVersion = '1.3.1.RELEASE'
    }
    repositories {
    	jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.eriwen:gradle-css-plugin:1.11.1'
        classpath "com.eriwen:gradle-js-plugin:1.12.1"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'css'
apply plugin: 'js'

jar {
    baseName = 'web'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

css.source {
    dev {
        css {
            srcDir "${projectDir}/src/main/resources/static/css"
            include "*.css"
            exclude "*.min.css"
        }
    }
}

// Specify a collection of files to be combined, then minified and finally GZip compressed.
combineCss {
    source = css.source.dev.css.files
    dest = "${buildDir}/all.css"
}

minifyCss {
    source = combineCss
    dest = "${buildDir}/all-min.css"
    //yuicompressor { // Optional
    //    lineBreakPos = -1
    //}
}

gzipCss {
    source = minifyCss
    dest = "${buildDir}/all.1.0.0.css"
}

javascript.source {
    dev {
        js {
            srcDir "${projectDir}/src/main/resources/static/scripts"
            include "*.js"
            exclude "*.min.js"
        }
    }
    prod {
        js {
            srcDir "${projectDir}/src/main/resources/static/scripts"
            include "*.min.js"
        }
    }
}

// Configure the built-in task
combineJs {
    //encoding = "UTF-8"
    source = javascript.source.dev.js.files
    dest = file("${buildDir}/all.js")
}

minifyJs {
    source = combineJs
    dest = file("${buildDir}/all-min.js")
    sourceMap = file("${buildDir}/all.sourcemap.json")
    closure {
        warningLevel = 'QUIET'
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-freemarker'
    compile 'org.springframework.boot:spring-boot-starter-mail'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.session:spring-session'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.hibernate:hibernate-envers'
    compile 'joda-time:joda-time'
    compile 'joda-time:joda-time-hibernate:1.3'
    compile 'javax.inject:javax.inject:1'
    compile 'org.jadira.usertype:usertype.core:4.0.0.GA'
    
    compile 'org.webjars:bootstrap:3.3.6'
    compile 'org.webjars:font-awesome:4.5.0'
    compile 'org.webjars.bower:simple-line-icons:1.0.0'
    compile 'org.webjars:uniform:2.1.2-1'
    compile 'org.webjars:jquery-blockui:2.65'
    compile 'org.webjars.bower:easypie:2.1.6'
    compile 'org.webjars:jquery.sparkline:2.1.2'
    //compile 'org.webjars.bower:angularjs:1.5.0-rc.0'
   
    runtime 'com.h2database:h2'
    runtime 'mysql:mysql-connector-java'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

task buildCss {
	dependsOn << gzipCss
}